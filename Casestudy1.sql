create database Walmart
use Walmart
select * from fact;
select * from Location;
select * from Product;

--Display the number of states present in the Location
select distinct State from Location;

--How many products are of regular type

select distinct Product_type from Product where type ='Regular';

--How much spending has been done on marketing of product id 1

select sum(Marketing) as marketing_productid_1 from fact where ProductId = 1;

--What is the minimum sales of a product

select min(Sales) as Min_Sales from fact group by ProductId

--Display the max Cost of Good Sold (COGS)

select Max(COGS) as Max_COGS from fact;

--Display the details of the product where product type is coffee

Select * from product where Product_type = 'Coffee';

--. Display the details where total expenses are greater than40
select * from fact;
select * from Location;
select * from Product;

Select * from fact where Total_Expenses > 40;

--What is the average sales in area code 719

select avg(Sales) As AVG_Sales_719 from fact where Area_Code = 719;

--Find out the total profit generated by Colorado state

select sum(f.Profit) as Profit_Colorado
from fact as f
join 
Location as l on f.Area_code = l.Area_Code
 where l.State = 'Colorado';

--Display the average inventory for each product ID

select 
f.ProductId,
avg(Inventory) as AVG_Stock
from fact as f
group by ProductId order by ProductID;

--Display state in a sequential order in a Location

select * from Location order by state;

--Display the average budget of the Product where the average budgetmargin should be greater than 100

select Avg(Budget_COGS) as Avg_budget, f.ProductId
from fact as f where f.Budget_Margin >100 group by f.ProductId
order by ProductId;

--What is the total sales done on date 2010-01-01

select sum(Sales) as Total_Sales
from fact as f
where 
f.Date='2010-01-01';

--Display the average total expense of each product ID on an individual date

select AVG(Total_Expenses) AS Average_Total_Expenses, ProductID, Date
from fact
group by ProductID, Date
order by Date;

--Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.

select f.Date, f.ProductID, p.Product_Type, p.Product, f.Sales, f.Profit, l.State, f.Area_Code
from fact AS f
JOIN Product AS p ON f.ProductID = p.ProductID
JOIN Location AS l ON l.Area_Code = f.Area_Code;

--Display the rank without any gap to show the sales wise rank.
select * from fact;
select * from Location;
select * from Product

select 
    f.ProductID, 
    p.Product_Type, 
    p.Product, 
    SUM(f.Sales) AS TotalSales,
    DENSE_RANK() OVER (ORDER BY SUM(f.Sales) DESC) AS Sales_Rank
FROM 
    fact AS f
JOIN 
    Product AS p ON f.ProductID = p.ProductID
group by 
    f.ProductID, p.Product_Type, p.Product
Order by f.ProductID;

--Find the state wise profit and sales
Select
    l.State,
    sum(Profit) AS Profit,
   sum(f.Sales) AS Sales
from
    fact asf
Join
    Location AS l on f.Area_Code = l.Area_Code
group by
    l.State;

--Find the state wise profit and sales along with the product 
SELECT
    l.State,
    p.Product,
    SUM(Profit) AS Profit,
    SUM(f.Sales) AS Sales
FROM
    fact AS f
JOIN
    Location AS l ON f.Area_Code = l.Area_Code
JOIN
    Product AS p ON p.ProductId = f.ProductId
GROUP BY
    l.State, p.Product;

--If there is an increase in sales of 5%, calculate the  increasedsales.

select *, Increased_Sales = Sales * 1.05 from fact

--Find the maximum profit along with the product ID and producttype.

select * from fact

select f.ProductID,p.Product,Max(Profit) as MAXProfit from fact as f
join
Product as p on p.ProductId = f.ProductId
GROUP BY
    f.ProductID, p.Product;

--Create a stored procedure to fetch the result according to the product type from Product Table

create procedure ProductDetails 
    @ProductName as varchar(25)
as
begin
    select *
    from Product
    where Product_Type = @ProductName;
end;

exec ProductDetails 'Coffee';

--Write a query by creating a condition in which if the total expenses is less than60 then it is a profit or else loss

select *, ProfitOrLoss=
case
when Total_Expenses <60 then 'Profit'
else
'Loss'
end
from fact; 

--Give the total weekly sales value with the date and product ID details. Useroll-up to pull the data in hierarchical order

Select
Datepart(week,Date) as WeekNumber,
ProductId,
Date,
sum(Sales) as WeeklySales
from 
fact 
group by
Date,DATEPART(WEEK, Date), ProductId
WITH ROLLUP;

--Apply union and intersection operator on the tables which consist of attribute area code

select Area_Code from fact
Union
select Area_Code from Location

select Area_Code from fact
intersect
select Area_Code from Location

--Create a user-defined function for the product table to fetch a particular product type based upon  the user’s preference.

select * from product 

create function Prod_d
( @P_Name as varchar(25))

returns table
as 
return(
select * 
from Product
where 
Product_Type = @P_Name
);

select * from dbo.Prod_d('Espresso')

--Change the product type from coffee to tea where product ID is 1 and undo it
select * from Product;

begin transaction;

update Product set Product_Type = 'Tea' where ProductId = 1;

rollback;

--Display the date, product ID and sales where total expenses are between 100 to 200.

select * from fact

select Date,ProductId,Sales from fact where Total_Expenses >100 and Total_Expenses <200;


--Delete the records in the Product Table for regular type.

DELETE FROM Product
WHERE Type = 'regular';

--Display the ASCII value of the fifth character from the columnProduct

SELECT 
    ProductID,
    Product,
    ASCII(SUBSTRING(Product, 5, 1)) AS ASCII_Value
FROM 
    Product;
